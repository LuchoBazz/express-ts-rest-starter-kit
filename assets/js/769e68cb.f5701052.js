"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[439],{8292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=n(4848),r=n(8453);const i={sidebar_position:1},o="Project Structure Overview",a={id:"development/architecture",title:"Project Structure Overview",description:"This document provides a comprehensive overview of the project's structure, designed to assist developers and technical personnel in understanding the organization and components of the application. The project is organized in a modular fashion, promoting separation of concerns and maintainability. Below is a detailed description of each folder and its purpose.",source:"@site/docs/development/architecture.md",sourceDirName:"development",slug:"/development/architecture",permalink:"/express-ts-rest-starter-kit/docs/development/architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/development/architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Payment",permalink:"/express-ts-rest-starter-kit/docs/api/subscriptions/payment"}},c={},d=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Explanation of the Structure",id:"explanation-of-the-structure",level:2},{value:"/app",id:"app",level:3},{value:"/core",id:"core",level:3},{value:"/adapters",id:"adapters",level:3},{value:"/infrastructure",id:"infrastructure",level:3},{value:"/tests",id:"tests",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"project-structure-overview",children:"Project Structure Overview"})}),"\n",(0,s.jsx)(t.p,{children:"This document provides a comprehensive overview of the project's structure, designed to assist developers and technical personnel in understanding the organization and components of the application. The project is organized in a modular fashion, promoting separation of concerns and maintainability. Below is a detailed description of each folder and its purpose."}),"\n",(0,s.jsx)(t.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"/src\n\u2502\n\u251c\u2500\u2500 /app\n\u2502   \u251c\u2500\u2500 app.ts               # Application configuration and startup\n\u2502   \u251c\u2500\u2500 routes.ts            # Route definitions (connects with controllers)\n\u2502   \u2514\u2500\u2500 server.ts            # Express server configuration\n\u2502\n\u251c\u2500\u2500 /core                    # Core domain (business logic)\n\u2502   \u251c\u2500\u2500 /entities            # Domain entities\n\u2502   \u2502   \u2514\u2500\u2500 user.entity.ts   # Example entity (User)\n\u2502   \u251c\u2500\u2500 /services            # Services containing business logic\n\u2502   \u2502   \u2514\u2500\u2500 user.service.ts  # Example service (UserService)\n\u2502   \u251c\u2500\u2500 /repositories        # Persistence interfaces (ports)\n\u2502   \u2502   \u2514\u2500\u2500 user.repository.ts\n\u2502   \u2514\u2500\u2500 /use_cases           # Use cases (application logic)\n\u2502       \u2514\u2500\u2500 create_user.use_case.ts # Example use case (Create User)\n\u2502\n\u251c\u2500\u2500 /adapters                # Adapters (implementations of ports)\n\u2502   \u251c\u2500\u2500 /api                 # API adapters (controllers for HTTP input/output)\n\u2502   \u2502   \u251c\u2500\u2500 user.controller.ts # Controller for handling user-related requests\n\u2502   \u2502   \u2514\u2500\u2500 error.handler.ts    # Global error handling\n\u2502   \u251c\u2500\u2500 /persistence         # Persistence adapters (repository interface implementations)\n\u2502   \u2502   \u2514\u2500\u2500 user.prisma.ts   # Repository implementation using Prisma\n\u2502   \u2514\u2500\u2500 /mappers             # Data mappers (if necessary for layer translation)\n\u2502       \u2514\u2500\u2500 user.mapper.ts   # User mapper between data and domain layers\n\u2502\n\u251c\u2500\u2500 /infrastructure          # Infrastructure configuration and dependencies\n\u2502   \u251c\u2500\u2500 /database            # Database configuration\n\u2502   \u2502   \u2514\u2500\u2500 prisma.ts        # Database connection using Prisma\n\u2502   \u251c\u2500\u2500 /http                # Express configuration and middlewares\n\u2502   \u2502   \u2514\u2500\u2500 express.ts       # Express middleware configuration\n\u2502   \u251c\u2500\u2500 /logger              # Logger (e.g., Winston or similar)\n\u2502   \u2502   \u2514\u2500\u2500 logger.ts        # Logger configuration\n\u2502   \u2514\u2500\u2500 /env                 # Environment variable configuration\n\u2502       \u2514\u2500\u2500 config.ts        # Environment configuration file\n\u2502\n\u2514\u2500\u2500 /tests                   # Unit and integration tests\n    \u251c\u2500\u2500 /unit                # Unit tests for domain services\n    \u251c\u2500\u2500 /integration         # Integration tests for APIs and databases\n    \u2514\u2500\u2500 /mocks               # Mocks of dependencies for tests\n"})}),"\n",(0,s.jsx)(t.h2,{id:"explanation-of-the-structure",children:"Explanation of the Structure"}),"\n",(0,s.jsx)(t.h3,{id:"app",children:"/app"}),"\n",(0,s.jsx)(t.p,{children:"This folder contains the application startup and Express routes."}),"\n",(0,s.jsx)(t.h3,{id:"core",children:"/core"}),"\n",(0,s.jsx)(t.p,{children:'The core layer, or "nucleus," contains:'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Entities (/entities)"}),": Entities that represent business objects."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Services (/services)"}),": This is where the business logic resides."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Repositories (/repositories)"}),": Interfaces that define how to interact with data persistence."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"adapters",children:"/adapters"}),"\n",(0,s.jsx)(t.p,{children:"This section includes adapters that connect the domain with the outside world:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"API (/api)"}),": Express controllers that handle HTTP requests."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Persistence (/persistence)"}),": Concrete implementations of repositories (e.g., Prisma, Sequelize)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Mappers (/mappers)"}),": Optional mappers for converting data between different layers."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"infrastructure",children:"/infrastructure"}),"\n",(0,s.jsx)(t.p,{children:"Contains infrastructure configurations, such as the database, logging, and any application infrastructure-related settings."}),"\n",(0,s.jsx)(t.h3,{id:"tests",children:"/tests"}),"\n",(0,s.jsx)(t.p,{children:"Holds unit and integration tests, which can be divided into folders such as unit (testing domain logic) and integration (testing API, databases, etc.)."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);